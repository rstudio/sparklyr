% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr_hof.R
\name{hof_map_zip_with}
\alias{hof_map_zip_with}
\title{Merges two maps into one}
\usage{
hof_map_zip_with(x, func, dest_col = NULL, map1 = NULL, map2 = NULL, ...)
}
\arguments{
\item{x}{The Spark data frame to be processed}

\item{func}{The function to apply (it should take (key, value1, value2) as arguments,
where (key, value1) is a key-value pair present in map1, (key, value2) is a key-value
pair present in map2, and return a transformed value associated with key in the
resulting map}

\item{dest_col}{Column to store the query result
(default: the last column of the Spark data frame)}

\item{map1}{The first map being merged, could be any SQL expression evaluating to a
map (default: the first column of the Spark data frame)}

\item{map2}{The second map being merged, could be any SQL expression evaluating to a
map (default: the second column of the Spark data frame)}

\item{...}{Additional params to dplyr::mutate}
}
\description{
Merges two maps into a single map by applying the function specified to pairs of
values with the same key
(this is essentially a dplyr wrapper to the `map_zip_with(map1, map2, func)` higher-
order function, which is supported since Spark 3.0)
}
\examples{
\dontrun{

library(sparklyr)
sc <- spark_connect(master = "local", version = "3.0.0")
#TODO:
}

}
